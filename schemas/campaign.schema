{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"$id": "http://ulrichgabor.de/campaign_specification#",
	"title": "Campaign Configuration",

	"type": "object",
	"additionalProperties": false,
	"required": ["customIncludes", "buildCommand", "programPath", "goldenRunParams", "workloadParams", "comparisonCommand", "logLevel", "interfaces", "experiments"],
	"properties": {
		"customIncludes": {
			"type": "array",
			"minItems": 1,
			"description": "List of header-files to be included, if e.g. an error code should be replaced, which is not part of the standard interface.",
			"items": { "type": "string" }
		},
		"buildCommand": {
			"type": "array",
			"minItems": 1,
			"items": {
				"type": "string"
			},
			"description": "Command to build the software with AspectC++ with each array element representing one parameter."
		},
		"programPath": {
			"type": "string",
			"description": "Path to compiled executable on which tests are run."
		},
		"goldenRunParams": {
			"type": "array",
			"minItems": 1,
			"items": { "type": "string" },
			"description": "Array of parameters to do a golden run before running the tests. Set an output directory different to the one specified in 'workloadParams'."
		},
		"workloadParams": {
			"type": "array",
			"minItems": 1,
			"items": { "type": "string" },
			"description": "Array of parameters that specify the workload for the tests."
		},
		"comparisonCommand": {
			"type": "array",
			"minItems": 1,
			"items": { "type": "string" },
			"description": "Command to compare the result of a test run to the result of the golden run with each array element representing one parameter."
		},
		"logLevel": {
			"type": "integer",
			"minimum": 0,
			"maximum": 3
		},
		"interfaces": {
			"type": "array",
			"minItems": 1,
			"items": {
				"$ref": "http://ulrichgabor.de/interface_specification#"
			}
		},
		"experiments": {
			"type": "array",
			"minItems": 1,
			"items": {
				"type": "object",
				"additionalProperties": false,
				"required": ["target", "injection_mode"],
				"$comment": "oneOf und required umdrehen?",
				"oneOf" : [
					{"required": ["probability"]},
					{"required": ["callCount"]},
					{"required": ["each_occurrence_once"]}
				],
				"properties": {
					"target": {
						"type": "string",
						"description": "ID of a target specified in injectable interfaces configuration file."
					},
					"injection_mode": {
						"type": "string",
						"enum": ["replace", "invert", "offset+", "offset-", "each"]
					},
					"errorValue": {
						"type": "string",
						"description": "Used if injection_mode is 'replace'. The C++ representation of the value to be injected. If missing, the first error return value of the specified interface is used."
					},
					"probability": {
						"type": "integer",
						"minimum": 0,
						"maximum": 100
					},
					"seed": {
						"type": "integer",
						"minimum": 0,
						"description": "Seed for the pseudo-random-number generator used by the probability-trigger."
					},
					"callCount": {
						"type": "integer",
						"minimum": 0
					},
					"each_occurrence_once": {
						"type": "boolean",
						"description": "Switch to turn 'each_occurrence_once'-mode, that generates sub-experiments for each usage of the specified interface, on or off."
					}
				}
			}
		}
	}
}
