{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"$id": "http://ulrichgabor.de/campaign_specification#",
	"title": "Campaign Configuration",

	"type": "object",
	"additionalProperties": false,
	"required": ["buildCommand", "experimentCommand", "logLevel", "interfaces", "experiments"],
	"properties": {
		"predefined_interfaces": {
			"type": "array",
			"description": "Paths to predefined interface specification files.",
			"items": {"type": "string"}
		},
		"customIncludes": {
			"type": "array",
			"description": "List of header-files to be included, if e.g. an error code should be replaced, which is not part of the standard interface.",
			"items": { "type": "string" }
		},
		"ecAspects": {
			"type": "array",
			"description": "If the project contains aspects, which should be run after the error injecting aspects, e.g. error correcting aspects, name them here.",
			"items": { "type": "string" }
		},
		"customDelayInclude": {
			"type": "string",
			"description": "Change this if you do not have a <time.h> to be included."
		},
		"customDelayCode": {
			"type": "string",
			"description": "Change this if you do not want to call nanosleep() for delay. Your code should make use of the variable unsigned int duration_in_ms."
		},
		"buildCommand": {
			"type": "string",
			"description": "Command to build the software with AspectC++ with each array element representing one parameter."
		},
		"experimentCommand": {
			"type": "string",
			"description": "Command to execute on each experiment. Beware that this will be called from different directories. The first part of the string will be converted to an absolute path, but if you chain commands or do magic stuff you must use absolute paths by yourself."
		},
		"logLevel": {
			"type": "integer",
			"minimum": 0,
			"maximum": 3
		},
		"interfaces": {
			"type": "array",
			"minItems": 1,
			"items": {
				"$ref": "http://ulrichgabor.de/interface_specification#"
			}
		},
		"experiments": {
			"type": "array",
			"minItems": 1,
			"items": {
				"type": "object",
				"additionalProperties": false,
				"required": ["target", "injection_mode"],
				"$comment": "oneOf und required umdrehen?",
				"oneOf" : [
					{"required": ["probability"]},
					{"required": ["callCount"]},
					{"required": ["each_occurrence_once"]}
				],
				"properties": {
					"target": {
						"type": "string",
						"description": "ID of a target specified in injectable interfaces configuration file."
					},
					"experiment_mode": {
						"type": "string",
						"enum": ["call_count", "each_occurrence_once"]
					},
					"injection_mode": {
						"type": "string",
						"enum": ["replace", "invert", "offsetplus", "offsetminus", "each"]
					},
					"error_value": {
						"type": "string",
						"description": "Used if injection_mode is 'replace'. The C++ representation of the value to be injected. If missing, the first error return value of the specified interface is used."
					},
					"error_situation_index": {
						"type": "integer",
						"description": "Used if injection_mode is 'replace'. Index of the error_situation array of the interface, whose value should be injected."
					},
					"probability": {
						"type": "integer",
						"minimum": 0,
						"maximum": 100,
						"description": "NOT USED. Used if injection_mode is 'random'."
					},
					"seed": {
						"type": "integer",
						"minimum": 0,
						"description": "NOT USED. Used if injection_mode is 'random'. Seed for the pseudo-random-number generator used by the probability-trigger."
					},
					"callCount": {
						"type": "integer",
						"minimum": 0,
						"description": "Used if injection_mode is 'call_count'."
					}
				}
			}
		}
	}
}
